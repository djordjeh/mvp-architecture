apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "djordjeh.architecture.mvp"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        mock {
            debuggable true
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled false
            zipAlignEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding {
        enabled = true
    }

    // debug variants uses the same source dir as release
    sourceSets {
        debug.java.srcDir 'src/release/java'
    }

    testOptions.unitTests.includeAndroidResources = true
}

dependencies {
    implementation "com.android.support:appcompat-v7:$supportLibVersion"
    implementation "com.android.support:recyclerview-v7:$supportLibVersion"
    implementation "com.android.support:design:$supportLibVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    // Dagger Core
    implementation "com.google.dagger:dagger:$project.daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$project.daggerVersion"

    // Dagger Android
    implementation "com.google.dagger:dagger-android:$project.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$project.daggerVersion"
    annotationProcessor "com.google.dagger:dagger-android-processor:$project.daggerVersion"

    // ReactiveX
    implementation "io.reactivex.rxjava2:rxandroid:$project.rxAndroidVersion"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$project.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$project.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$project.retrofitVersion"

    // SQLite
    implementation "com.squareup.sqlbrite3:sqlbrite:$project.sqlbriteVersion"
    implementation "android.arch.persistence:db-framework:$project.dbFrameworkVersion"

    // Dependencies for local unit tests
    testImplementation "junit:junit:$project.junitVersion"
    testImplementation "org.mockito:mockito-all:$project.mockitoVersion"

    // Robolectric
    testImplementation 'org.robolectric:robolectric:4.2'
    testImplementation 'org.robolectric:shadows-supportv4:4.2'
    testImplementation "com.google.dagger:dagger:$project.daggerVersion"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:$project.daggerVersion"


}

// Test project needs to find generated classes by dagger
android.applicationVariants.all {
    def aptOutputDir = new File(buildDir, "generated/source/apt/${it.unitTestVariant.dirName}")
    it.unitTestVariant.addJavaSourceFoldersToModel(aptOutputDir)
}